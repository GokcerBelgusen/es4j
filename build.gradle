buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.1.0'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'

    }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
    id 'me.champeau.gradle.jmh' version '0.3.0'
    id "com.jfrog.bintray" version "1.7"
    id 'net.researchgate.release' version '2.3.4'
    id 'com.palantir.git-version' version '0.5.1'
}

apply plugin: 'me.champeau.gradle.jmh' // performance benchmarking
apply plugin: 'nebula-aggregate-javadocs'

release {
    tagTemplate = 'v${version}'
    failOnPublishNeeded = false
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'license'

    license {
        header rootProject.file('LICENSE-HEADER')
    }

    repositories {
        jcenter()
        maven {
            url  "http://dl.bintray.com/eventsourcing/maven"
        }
        maven {
            url  "http://dl.bintray.com/unprotocols/maven"
        }
    }

}

subprojects {
    version = rootProject.version

    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'java-library-distribution'
    apply plugin: 'biz.aQute.bnd.builder'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    jar {
        manifest {
            instruction 'Require-Capability', 'osgi.extender'
        }
    }

    javadoc {
        failOnError = false
    }

    task sourceJar(type: Jar) {
        group "Build"
        description "An archive of the source code"
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        group "Build"
        description "An archive of the javadoc"
        classifier "javadoc"
        from javadoc
    }

    jar.finalizedBy sourceJar
    jar.finalizedBy javadocJar

    artifacts {
        sourceJar
        javadocJar
    }

    publishing {
        publications {
            MyPublication(MavenPublication) {
                from components.java
                artifact sourceJar
                artifact javadocJar
                groupId 'com.eventsourcing'
                artifactId project.name
                version rootProject.hasProperty('snapshot') ? gitVersion() : project.version
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['MyPublication']
        publish = true
        pkg {
            repo = !rootProject.hasProperty('snapshot') ? 'maven' : 'maven-snapshots'
            name = project.name
            userOrg = 'eventsourcing'
            licenses = ['MPL-2.0']
            vcsUrl = 'https://github.com/eventsourcing/es4j'
            version {
                name = !rootProject.hasProperty('snapshot') ? project.version : gitVersion()
            }
        }
    }

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-api:1.7.18'
        compile 'org.slf4j:slf4j-simple:1.7.18'

        // Unit testing
        testCompile 'org.testng:testng:6.9.10'

        // Remove boilerplate
        compile 'org.projectlombok:lombok:1.16.8'

        // COSS
        compile 'org.unprotocols:coss:1.0.0'

        // OSGi
        compile 'org.osgi:org.osgi.core:6.0.0'
        compile 'org.osgi:org.osgi.service.cm:1.5.0'
        compile 'org.osgi:org.osgi.service.component:1.3.0'
        compile 'biz.aQute.bnd:biz.aQute.bndlib:3.1.0'

    }

    test.useTestNG()
}

idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors'
            xmlFile.asNode().component.find {
                it.@name == 'CompilerConfiguration'
            }['annotationProcessing'][0].replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }
        }
    }
}

dependencies {
    compile project(':eventsourcing-core')
    compile project(':eventsourcing-inmem')
    compile project(':eventsourcing-h2')
    compile project(':eventsourcing-postgresql')

    // Remove boilerplate
    compile 'org.projectlombok:lombok:1.16.8'

    // Connection pool
    testCompile 'com.zaxxer:HikariCP:2.4.6'

}

afterReleaseBuild.dependsOn project(':eventsourcing-layout').tasks.findByName("bintrayUpload")
afterReleaseBuild.dependsOn project(':eventsourcing-hlc').tasks.findByName("bintrayUpload")
afterReleaseBuild.dependsOn project(':eventsourcing-core').tasks.findByName("bintrayUpload")
afterReleaseBuild.dependsOn project(':eventsourcing-h2').tasks.findByName("bintrayUpload")
afterReleaseBuild.dependsOn project(':eventsourcing-cep').tasks.findByName("bintrayUpload")
