buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.1.0'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'

    }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
    id 'me.champeau.gradle.jmh' version '0.3.0'
    id "com.jfrog.bintray" version "1.6"
    id 'net.researchgate.release' version '2.3.4'
}

apply plugin: 'me.champeau.gradle.jmh' // performance benchmarking
apply plugin: 'nebula-aggregate-javadocs'

release {
    tagTemplate = 'v${version}'
    failOnPublishNeeded = false
}

allprojects {
    apply plugin: 'idea'

    repositories {
        jcenter()
    }

}

subprojects {
    version = rootProject.version

    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'license'
    apply plugin: 'java-library-distribution'
    apply plugin: 'biz.aQute.bnd.builder'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    license {
        header rootProject.file('LICENSE')
    }

    jar {
        manifest {
            instruction 'Require-Capability', 'osgi.extender'
        }
    }

    publishing {
        publications {
            MyPublication(MavenPublication) {
                from components.java
                groupId 'org.eventchain'
                artifactId project.name
                version project.version
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['MyPublication']
        pkg {
            repo = 'org.eventchain'
            name = project.name
            userOrg = 'eventchain'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/eventchain/eventchain'
            version {
                name = project.version
            }
        }
    }

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-api:1.7.18'
        compile 'org.slf4j:slf4j-simple:1.7.18'

        // Unit testing
        testCompile 'org.testng:testng:6.9.10'

        // Remove boilerplate
        compile 'org.projectlombok:lombok:1.16.8'

        // OSGi
        compile 'org.osgi:org.osgi.core:6.0.0'
        compile 'org.osgi:org.osgi.service.cm:1.5.0'
        compile 'org.osgi:org.osgi.service.component:1.3.0'
        compile 'biz.aQute.bnd:biz.aQute.bndlib:3.1.0'

    }

    test.useTestNG()
}

idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors'
            xmlFile.asNode().component.find {
                it.@name == 'CompilerConfiguration'
            }['annotationProcessing'][0].replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }
        }
    }
}

dependencies {
    compile project(':eventchain-core')
    compile project(':eventchain-h2')

    // Remove boilerplate
    compile 'org.projectlombok:lombok:1.16.8'

}